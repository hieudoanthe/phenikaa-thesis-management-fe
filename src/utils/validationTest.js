/**
 * Test utility ƒë·ªÉ ki·ªÉm tra validation c·ªßa Defense Session Management
 * File n√†y c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ test c√°c tr∆∞·ªùng h·ª£p validation
 */

// Mock data ƒë·ªÉ test validation
export const mockSessionData = {
  scheduleId: 1,
  sessionName: "Test Defense Session",
  defenseDate: "2024-01-15",
  startTime: "2024-01-15T09:00:00",
  endTime: "2024-01-15T10:00:00",
  location: "A2-201",
  maxStudents: 5,
  status: "PLANNING",
  committeeMembers: [1, 2, 3], // Mock lecturer IDs
  reviewerMembers: [4], // Mock reviewer ID
};

// Mock error responses t·ª´ backend
export const mockValidationErrors = {
  lecturerConflict: {
    response: {
      data: {
        error:
          "Gi·∫£ng vi√™n ID 1 ƒë√£ c√≥ l·ªãch b·∫£o v·ªá trong kho·∫£ng th·ªùi gian n√†y. Vui l√≤ng ch·ªçn th·ªùi gian kh√°c.",
      },
    },
  },
  roomConflict: {
    response: {
      data: {
        error:
          "Ph√≤ng A2-201 ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong kho·∫£ng th·ªùi gian n√†y. Vui l√≤ng ch·ªçn ph√≤ng kh√°c ho·∫∑c th·ªùi gian kh√°c.",
      },
    },
  },
  multipleLecturerConflict: {
    response: {
      data: {
        error:
          "Gi·∫£ng vi√™n ID 2 ƒë√£ c√≥ l·ªãch b·∫£o v·ªá trong kho·∫£ng th·ªùi gian n√†y. Vui l√≤ng ch·ªçn th·ªùi gian kh√°c.",
      },
    },
  },
};

// Mock teacher data
export const mockTeachers = [
  { userId: 1, fullName: "Nguy·ªÖn VƒÉn A" },
  { userId: 2, fullName: "Tr·∫ßn Th·ªã B" },
  { userId: 3, fullName: "L√™ VƒÉn C" },
  { userId: 4, fullName: "Ph·∫°m Th·ªã D" },
];

/**
 * Test function ƒë·ªÉ ki·ªÉm tra vi·ªác x·ª≠ l√Ω l·ªói validation
 */
export const testValidationErrorHandling = (error, teachers) => {
  let msg = "";

  // X·ª≠ l√Ω c√°c format l·ªói kh√°c nhau t·ª´ backend
  if (error.response && error.response.data) {
    if (error.response.data.error) {
      msg = String(error.response.data.error);
    } else if (error.response.data.message) {
      msg = String(error.response.data.message);
    } else if (typeof error.response.data === "string") {
      msg = error.response.data;
    }
  }

  if (msg) {
    // Thay ID -> t√™n gi·∫£ng vi√™n n·∫øu b·∫Øt ƒë∆∞·ª£c ID
    const idToName = new Map(
      (Array.isArray(teachers) ? teachers : []).map((t) => [
        String(t.userId),
        t.fullName || `Gi·∫£ng vi√™n ${t.userId}`,
      ])
    );

    // T√¨m v√† thay th·∫ø t·∫•t c·∫£ c√°c pattern "Gi·∫£ng vi√™n ID X" th√†nh t√™n th·ª±c
    msg = msg.replace(/Gi·∫£ng vi√™n ID\s+(\d+)/gi, (match, id) => {
      const name = idToName.get(id);
      return name ? `Gi·∫£ng vi√™n ${name}` : match;
    });
  }

  return msg;
};

/**
 * Test cases ƒë·ªÉ ki·ªÉm tra validation
 */
export const testCases = [
  {
    name: "Lecturer Schedule Conflict",
    error: mockValidationErrors.lecturerConflict,
    expected:
      "Gi·∫£ng vi√™n Nguy·ªÖn VƒÉn A ƒë√£ c√≥ l·ªãch b·∫£o v·ªá trong kho·∫£ng th·ªùi gian n√†y. Vui l√≤ng ch·ªçn th·ªùi gian kh√°c.",
  },
  {
    name: "Room Schedule Conflict",
    error: mockValidationErrors.roomConflict,
    expected:
      "Ph√≤ng A2-201 ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong kho·∫£ng th·ªùi gian n√†y. Vui l√≤ng ch·ªçn ph√≤ng kh√°c ho·∫∑c th·ªùi gian kh√°c.",
  },
  {
    name: "Multiple Lecturer Conflict",
    error: mockValidationErrors.multipleLecturerConflict,
    expected:
      "Gi·∫£ng vi√™n Tr·∫ßn Th·ªã B ƒë√£ c√≥ l·ªãch b·∫£o v·ªá trong kho·∫£ng th·ªùi gian n√†y. Vui l√≤ng ch·ªçn th·ªùi gian kh√°c.",
  },
];

/**
 * Ch·∫°y t·∫•t c·∫£ test cases
 */
export const runValidationTests = () => {
  console.log("üß™ Running Defense Session Validation Tests...");

  testCases.forEach((testCase, index) => {
    const result = testValidationErrorHandling(testCase.error, mockTeachers);
    const passed = result === testCase.expected;

    console.log(`Test ${index + 1}: ${testCase.name}`);
    console.log(`Expected: ${testCase.expected}`);
    console.log(`Actual: ${result}`);
    console.log(`Status: ${passed ? "‚úÖ PASSED" : "‚ùå FAILED"}`);
    console.log("---");
  });
};

export default {
  mockSessionData,
  mockValidationErrors,
  mockTeachers,
  testValidationErrorHandling,
  testCases,
  runValidationTests,
};
